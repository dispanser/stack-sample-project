* Stack Project Template and Cheat Sheet

This project aims to provide a stack project that works as a template for many
common use cases, including sample code for basic things. It's inspired by
[[https://pbrisbin.com/posts/haskell_project_checklist/][Pbrisbins haskell project checklist]].

** Project Goals

Create an annotated stack project with the following properties:
- [ ] multi-module build
- [ ] code generation: proto-lens
  - [ ] use the generated code in the same module
  - [ ] use the generated code in another module
- [X] tests
- [ ] benchmarks
- [ ] nix support (not a nix-based build, just stack nix support)
- [ ] dependency outside of stackage

Use the following frameworks / libraries:
- [X] tasty: test execution framework
- [ ] hedgehog: property based testing (integrate via tasty-hedgehog)
- [ ] criterion (or research)

Provide sample code:
- [ ] tests
- [ ] property-based tests
- [ ] benchmarks

acceptance criteria:
- [ ] documentation of the structure, describing each non-obvious entry

** stack.yaml

The basic configuration file for the entire project is [[./stack.yaml]], defining the basic resolver
and structure.

- extra-deps will (later) be used to specify versions that don't exist or
  are not compatible with stackage
- the nix section should contain all the packages that are required for linking
- packages defines the locations of what would be modules in a maven or
  gradle world.

#+BEGIN_SRC
resolver: lts-11.10
packages:
  - '.'
extra-deps: []
nix:
  enable:
    true
  packages: [ zlib ]
#+END_SRC

** package.yaml

We a include [[./package.yaml]] file that defines the structure of the
individual structure of the module:
- library, executables, tests
- dependencies: globally and per entry
  - only your tests depend on the test framework
  - only your executable depends on the option parser library
  - ...
